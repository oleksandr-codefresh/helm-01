gitops-runtime:
  cf-argocd-extras:
    # libraryMode: false
    # enabled: true
    # eventReporter:
    #   container:
    #     image:
    #       # registry: docker.io
    #       # repository: xeonalex/cf-argocd-extras
    #       # tag: change-revision-0
    #       tag: cr-28681-no-omit-empty-for-git-source-83f75b8  
    #   configMaps:
    #     cmd-params-cm:
    #       enabled: true
    #       data:
    #         repo.server: argo-cd-repo-server:8081
    sourcesServer:
      container:
        # image:
        #   tag: 2025.01.27-6069b19
        env:
          SOURCES_SERVER_ARGO_CD_TOKEN:
            valueFrom:
              secretKeyRef:
                key: token
                name: argocd-token
          SOURCES_SERVER_ARGO_CD_SERVER:
            valueFrom:
              configMapKeyRef:
                key: argoCdUrl
                name: cap-app-proxy-cm
  app-proxy:
    replicaCount: 1
    config:
      cors: http://local.codefresh.io
      argoCdUrl: http://argo-cd-server:80/argocd # /argocd path
      # image:
      # repository: quay.io/codefresh/dev/cap-app-proxy
      # tag: 1.3268.0
  argo-workflows:
    controller:
      podGCDeleteDelayDuration: '300s'
      # replicas: 1
  argo-cd:
    # global:
    #   image:
    #     repository: xeonalex/personal-argocd-dev
    #     tag: v3.0.1-merge-1
    extraObjects:
      - apiVersion: networking.k8s.io/v1
        kind: Ingress
        metadata:
          annotations:
            nginx.ingress.kubernetes.io/backend-protocol: HTTP
          name: argocd-server
        spec:
          ingressClassName: nginx-public
          rules:
            - host: alex-hermes-local.rnd.sandbox.codefresh.io
              http:
                paths:
                  - backend:
                      service:
                        name: argo-cd-server
                        port:
                          number: 80
                    path: /argocd
                    pathType: Prefix
      # - apiVersion: apps/v1
      #   kind: Deployment
      #   metadata:
      #     name: broken-depl
      #     namespace: helm-01
      #   spec:
      #     progressDeadlineSeconds: 60
      #     replicas: 1
      #     revisionHistoryLimit: 3
      #     selector:
      #       matchLabels:
      #         test: 1
      #         app: helm-guestbook
      #         release: helm-guesbook-dev
      #     template:
      #       metadata:
      #         labels:
      #           test: 1
      #           app: helm-guestbook
      #           release: helm-guesbook-dev
      #       spec:
      #         containers:
      #           - image: xeonalex/guesbook:0.3
      #             imagePullPolicy: IfNotPresent
      #             livenessProbe:
      #               httpGet:
      #                 path: /
      #                 port: http
      #             name: helm-guestbook
      #             ports:
      #               - containerPort: 80
      #                 name: http
      #                 protocol: TCP
      #             readinessProbe:
      #               httpGet:
      #                 path: /
      #                 port: http
    configs:
      params:
        server.basehref: /argocd # /argocd path
        server.rootpath: /argocd # /argocd path
        # controller.repo.server.timeout.seconds: "300"
        controller.log.level: debug
    eventReporter:
      enabled: true
      # image:
        # repository: xeonalex/personal-argocd-dev
        # tag: v2.13.3-2025.1.9-67d01f9e0
      replicas: 3
      # env:
      #   - name: USE_GRPC
      #     value: "true"
      # env:
      #   - name: CODEFRESH_RUNTIME_VERSION
      #     value: "0.1.64"
      resources:
        requests:
          cpu: "0.1"
          memory: "100Mi"
        limits:
          cpu: "0.1"
          memory: "100Mi"
        # limits:
        #   cpu: "0.3"
        #   memory: "300Mi"
    repoServer:
      # image:
      #   repository: quay.io/codefresh/argocd
      #   tag: v2.12.3-2024.11.14-d7a4c4e7e
      replicas: 1
      volumes:
        - configMap:
            name: helm-sops-config
          name: cmp-plugin
      # extraContainers:
      # - name: cmp
      #   command: [/var/run/argocd/argocd-cmp-server]
      #   image: busybox
      #   securityContext:
      #     runAsNonRoot: true
      #     runAsUser: 999
      #   env:
      #     - name: HELM_CACHE_HOME
      #       value: /helm-working-dir
      #     - name: HELM_CONFIG_HOME
      #       value: /helm-working-dir
      #     - name: HELM_DATA_HOME
      #       value: /helm-working-dir
      #     # - name: ARGOCD_EXEC_TIMEOUT
      #     #   value: 600s
      #   volumeMounts:
      #     - mountPath: /var/run/argocd
      #       name: var-files
      #     - mountPath: /home/argocd/cmp-server/plugins
      #       name: plugins
      #     - mountPath: /home/argocd/cmp-server/config/plugin.yaml
      #       subPath: plugin.yaml
      #       name: cmp-plugin
      #     - name: helm-working-dir
      #       mountPath: /helm-working-dir

    # extraObjects:
    # - apiVersion: v1
    #   kind: ConfigMap
    #   metadata:
    #     name: helm-sops-config
    #   data:
    #     plugin.yaml: |
    #       apiVersion: argoproj.io/v1alpha1
    #       kind: ConfigManagementPlugin
    #       metadata:
    #         name: cmp-plugin
    #       spec:
    #         version: v1.0
    #         init:
    #           command: [sh, -c, 'echo "Initializing..."']
    #         generate:
    #           command: [sh, -c, 'echo "{\"kind\": \"ConfigMap\", \"apiVersion\": \"v1\", \"metadata\": { \"name\": \"$ARGOCD_APP_NAME\", \"namespace\": \"$ARGOCD_APP_NAMESPACE\", \"annotations\": {\"Foo\": \"$ARGOCD_ENV_FOO\", \"KubeVersion\": \"$KUBE_VERSION\", \"KubeApiVersion\": \"$KUBE_API_VERSIONS\",\"Bar\": \"baz\"}}}"']
    #         discover:
    #           fileName: "./*.yaml"

    controller:
      # image:
      #   repository: docker.io/pashacodefresh/argocd
      #   tag: latest
      replicas: 1

    server:
      # image:
      #   repository: docker.io/pashacodefresh/argocd
      #   tag: latest
      replicas: 1
        # config:
        #   server.repo.server.timeout.seconds: 600s
        #   controller.repo.server.timeout.seconds: 600s
        # image:
        #   repository: docker.io/xeonalex/personal-argocd-dev
        #   tag: vuln-fix
      # service:
      # annotations:
      #   kubernetes.io/ingress.class: nginx-public
      # type: LoadBalancer - краще юзати ingress
      # event-reporters:
      # workflow:
      # eventSource:
      #   replicas: 0
      # sensor:
      #   replicas: 0
    acrController:
      enabled: true
  gitops-operator:
    # image:
    #   repository: quay.io/codefresh/codefresh-gitops-operator
    #   tag: cr-24411-vuln-fixes
    env:
      ARGO_CD_URL: argo-cd-server:80/argocd # /argocd path
      # AP_URL: https://862554fc28bb.ngrok.app # local app-proxy
  global:
    # image:
    #   repository: docker.io/xeonalex/personal-argocd-dev
    #   tag: git-client
    codefresh:
      accountId: 67bca12b5e470fc3eecfdfb7
      url: https://alexs-platform.ngrok.io
      urlNgRok: https://alexs-platform.ngrok.io
      urlGost: https://86792f8be875e7bd.gost.shared-services.cf-infra.com
      userToken:
        secretKeyRef:
          name: codefresh-user-token
          key: token
      # tls:
      #   # --  Custom CA certificates bundle for platform access with ssl
      #   caCerts:
      #     # -- Reference to existing secret
      #     secretKeyRef:
      #       name: test-cf-cert
      #       key: sa
    runtime:
      ingress:
        # className: nginx-internal
        className: nginx-public
        enabled: true
        hosts:
          - alex-hermes-local.rnd.sandbox.codefresh.io #public
          # - alex-hermes-local.rnd-sandbox.cf-infra.com #internal
        protocol: https
      name: helm-01
      isConfigurationRuntime: true
  installer:
    skipValidation: true
